// Prisma schema for Cloudflare D1
// Note: D1 does not support Prisma Migrate
// Manage database schema via Wrangler D1 migrations (migrations/*.sql)
// Prisma is used only for type-safe queries
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"  // Used only for Prisma introspection; not actually used
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  name          String?
  password      String?   // Encrypted password (optional, for credentials login)
  emailVerified Int?      @map("email_verified") // Email verification timestamp
  image         String?   // User avatar URL
  createdAt     Int       @default(dbgenerated("(strftime('%s', 'now'))")) @map("created_at")
  updatedAt     Int       @default(dbgenerated("(strftime('%s', 'now'))")) @map("updated_at")
  posts         Post[]
  accounts      Account[] // OAuth account associations
  sessions      Session[] // Session management

  @@index([email])
  @@index([createdAt])
  @@map("users")
}

// OAuth account table (supports Google, GitHub, etc.)
model Account {
  id                Int     @id @default(autoincrement())
  userId            Int     @map("user_id")
  type              String  // oauth, email, etc.
  provider          String  // google, github, etc.
  providerAccountId String  @map("provider_account_id")
  refreshToken      String? @map("refresh_token")
  accessToken       String? @map("access_token")
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token")
  sessionState      String? @map("session_state")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

// Session table (session management)
model Session {
  id           Int    @id @default(autoincrement())
  sessionToken String @unique @map("session_token")
  userId       Int    @map("user_id")
  expires      Int    // Expiration timestamp

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

// Email verification token table
model VerificationToken {
  identifier String
  token      String   @unique
  expires    Int      // Expiration timestamp

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Post {
  id        Int     @id @default(autoincrement())
  userId    Int     @map("user_id")
  title     String
  content   String?
  published Boolean @default(false)
  createdAt Int     @default(dbgenerated("(strftime('%s', 'now'))")) @map("created_at")
  updatedAt Int     @default(dbgenerated("(strftime('%s', 'now'))")) @map("updated_at")
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([published])
  @@index([createdAt])
  @@map("posts")
}
